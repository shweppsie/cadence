#!/usr/bin/env python

from re import match
from random import randint
from time import strftime
from optparse import OptionParser
from mpd import MPDClient, ConnectionError
from time import sleep
import socket

client = MPDClient()
albums = [] 

def main():
    global albums

    usage = "Usage: %prog"
    parser = OptionParser(usage=usage)
    (options, args) = parser.parse_args()

    while 1:
        try:
            cadence()
        except socket.error:
            connect(client)
        except ConnectionError:
            connect(client)

def connect(client):
    #make sure client doesn't think we're connected
    try:
        client.disconnect()
    except:
        ""
    #and try to connect
    try:
        client.connect("localhost", 6600)
    except:
        print "Connecting Failed!"
        sleep(1)

def cadence():
    albums = getAlbums()
    updating = False

    while 1:
        #if mpd is updating then update our db as soon is it stops
        if 'updating_db' in client.status():
            if updating == False:
                print "mpd is updating! Updating db soon"
                updating = True
        else:
            if updating == True:
                print "Updating db"
                albums = getAlbums()
                updating = False

        #if mpc is stopped clear the playlist
        if client.status()['state'] == 'stop':
            client.clear()
        else:
            removePlayedTracks()
        #we want at least 1 track in the playlist
        if len(client.playlist()) <= 1:
            addAlbum()

        #if mpc is stopped start it playing
        if client.status()['state'] == 'stop':
            client.play()

        sleep(1);

        print strftime("%Y-%m-%d %H:%M:%S")

#find albums in mpd library
#this assumes a folder structure of "^albums/(artist)/(album)/.*(.mp3|.flac|etc)"
def getAlbums():
        "returns all songs from the mpd database"
        client.iterate = True
        files = client.listallinfo()
        client.iterate = False

        #find albums and add them to the set
        albums = {}
        directory = ""
        for file in files:
            if 'directory' in file:
                directory = file['directory']
            if 'file' in file:
                i = match('^albums/.*/(.*)/.*\.(mp3|flac)', file['file'])
                if i is not None:
                    if 'album' in file:
                        album = file['album']
                        if isinstance(album, list):
                            album=album[0]
                        albums[album] = directory
        #check we found something
        if len(albums) < 1:
                print "ERROR: No albums found!"
                exit(1)

        return albums.items()

def removePlayedTracks():
    #remove played tracks
    for i in range(0, int(client.currentsong()['pos'])):
        client.delete(0)

def addAlbum():
        #add an album at random
        #this relies on a folder structure of "(artist)/(album)/.*(.mp3|.flac|etc)"
        print "1 track remains. Adding a random album..."
        
        #fetch a random album. Check there is actually tracks in it
        album = albums[randint(0, len(albums)-1)]
        
        print "adding: %s" % album[1]
        client.add(album[1]);

if __name__ == "__main__":
    main()
    sys.exit(0)

